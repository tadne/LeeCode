package LeeCode;

public class code343_整数拆分 {
    public static void main(String[] args) {
        //给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。
        //
        //返回 你可以获得的最大乘积 。
        System.out.println(integerBreak(10));
    }
    //已知 n=x+y+z+...  求 x*y的最大值
    //首先,我们可以知道 x,y,z,..>1 ,不然就没有拆分的必要
    //接下来,我们应该知道,在指定了拆分整数个数的情况下,拆分的越均匀越好 :  举例,指定了周长的情况下,正方形的面积最大,n维同理
    //接下来,我们要证明,拆分最大不要超过4,为什么? 因为5以及它以上都可以拆分的比它本身更大. 例: 5=2+3 其中 2*3=6>5
    //然后 4可以拆分成两个2,也就是说,我们拆分后的整数可以要么是2要么是3
    //其中,我们发现,3*3=9>2*2*2=8 并且 3+3=2+2+2 , 也就是3其实是比2的权重大

    //所以我们可以这样的决定:
    // 要拆分出的整数x满足:  2<=x<=3
    // 并且让其中3的数量尽量多,也就是不能同时出现3个2
    public static int integerBreak(int n) {
        if (n<=3) return n-1;
        int res=1;
        if (n%3==1){
            n-=4;
            res*=4;
        }else if (n%3==2){
            n-=2;
            res*=2;
        }
        int num=n/3;
        res*=Math.pow(3,num);
        return res;
    }
}
